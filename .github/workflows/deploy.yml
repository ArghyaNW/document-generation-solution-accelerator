name: DocGen Deploy-Test-Cleanup Pipeline

on:
  push:
    branches:
      - deploy-wf-w-azd

  workflow_run:
    workflows: ["Build Docker and Optional Push"]
    types:
      - completed
    branches:
      - main
      - dev
      - demo

  schedule:
    - cron: '0 9,21 * * *'  # Runs at 9:00 AM and 9:00 PM GMT

env:
  GPT_MIN_CAPACITY: 150
  TEXT_EMBEDDING_MIN_CAPACITY: 80
  BRANCH_NAME: ${{ github.event.workflow_run.head_branch || github.head_ref || github.ref_name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      RESOURCE_GROUP_NAME: ${{ steps.check_create_rg.outputs.RESOURCE_GROUP_NAME }}
      SOLUTION_NAME: ${{ steps.generate_solution_name.outputs.SOLUTION_NAME }}
      WEBAPP_URL: ${{ steps.deploy.outputs.WEBAPP_URL }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version  # Verify installation

      - name: Setup Azure Developer CLI
        run: |
          curl -fsSL https://aka.ms/install-azd.sh | sudo bash
          azd version 

      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          azd auth login --client-id ${{ secrets.AZURE_CLIENT_ID }} --client-secret ${{ secrets.AZURE_CLIENT_SECRET }} --tenant-id ${{ secrets.AZURE_TENANT_ID }}

      - name: Run Quota Check
        id: quota-check
        run: |
          export AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
          export AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
          export AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
          export AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          export GPT_MIN_CAPACITY=${{ env.GPT_MIN_CAPACITY }}
          export TEXT_EMBEDDING_MIN_CAPACITY=${{ env.TEXT_EMBEDDING_MIN_CAPACITY }}
          export AZURE_REGIONS="${{ vars.AZURE_REGIONS }}"

          chmod +x scripts/checkquota.sh
          if ! scripts/checkquota.sh; then
            # If quota check fails due to insufficient quota, set the flag
            if grep -q "No region with sufficient quota found" scripts/checkquota.sh; then
              echo "QUOTA_FAILED=true" >> $GITHUB_ENV
            fi
            exit 1  # Fail the pipeline if any other failure occurs
          fi


      - name: Send Notification on Quota Failure
        if: env.QUOTA_FAILED == 'true'
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          EMAIL_BODY=$(cat <<EOF
          {
            "body": "<p>Dear Team,</p><p>The quota check has failed, and the pipeline cannot proceed.</p><p><strong>Build URL:</strong> <a href=\"${RUN_URL}\">${RUN_URL}</a></p><p>Please take necessary action.</p><p>Best regards,<br>Your Automation Team</p>"
          }
          EOF
          )

          curl -X POST "${{ secrets.LOGIC_APP_URL }}" \
            -H "Content-Type: application/json" \
            -d "$EMAIL_BODY" || echo "Failed to send notification"

      - name: Fail Pipeline if Quota Check Fails
        if: env.QUOTA_FAILED == 'true'
        run: exit 1

      - name: Install Bicep CLI
        run: az bicep install
      
      - name: Set Deployment Region
        run: |
          echo "Selected Region: $VALID_REGION"
          echo "AZURE_LOCATION=$VALID_REGION" >> $GITHUB_ENV

      - name: Generate Resource Group Name
        id: generate_rg_name
        run: |
          echo "Generating a unique resource group name..."
          ACCL_NAME="docgen"  # Account name as specified
          SHORT_UUID=$(uuidgen | cut -d'-' -f1)
          UNIQUE_RG_NAME="arg-${ACCL_NAME}-${SHORT_UUID}"
          echo "RESOURCE_GROUP_NAME=${UNIQUE_RG_NAME}" >> $GITHUB_ENV
          echo "Generated RESOURCE_GROUP_NAME: ${UNIQUE_RG_NAME}"
      
      - name: Check and Create Resource Group
        id: check_create_rg
        run: |
          set -e  
          echo "Checking if resource group exists..."
          rg_exists=$(az group exists --name ${{ env.RESOURCE_GROUP_NAME }})
          if [ "$rg_exists" = "false" ]; then
            echo "Resource group does not exist. Creating..."
            az group create --name ${{ env.RESOURCE_GROUP_NAME }} --location ${{ env.AZURE_LOCATION }} || { echo "Error creating resource group"; exit 1; }
          else
            echo "Resource group already exists."
          fi
          echo "RESOURCE_GROUP_NAME=${{ env.RESOURCE_GROUP_NAME }}" >> $GITHUB_OUTPUT

      - name: Generate Unique Solution Name
        id: generate_solution_name
        run: |
          set -e
          COMMON_PART="psldg"
          TIMESTAMP=$(date +%s)
          UPDATED_TIMESTAMP=$(echo $TIMESTAMP | tail -c 6)
          UNIQUE_SOLUTION_NAME="${COMMON_PART}${UPDATED_TIMESTAMP}"
          echo "SOLUTION_NAME=${UNIQUE_SOLUTION_NAME}" >> $GITHUB_ENV
          echo "SOLUTION_NAME=${UNIQUE_SOLUTION_NAME}" >> $GITHUB_OUTPUT
          echo "Generated SOLUTION_NAME: ${UNIQUE_SOLUTION_NAME}"

      - name: Create Environment and set Variables
        id: create_env
        run: |
          set -e

          echo "Creating environment..."
          azd env new ${{ env.SOLUTION_NAME }} --no-prompt
          echo "Environment created: ${{ env.SOLUTION_NAME }}"

          # set image tag based on branch
          if [[ "${{ env.BRANCH_NAME }}" == "main" ]]; then
            IMAGE_TAG="latest"
          elif [[ "${{ env.BRANCH_NAME }}" == "dev" ]]; then
            IMAGE_TAG="dev"
          elif [[ "${{ env.BRANCH_NAME }}" == "demo" ]]; then
            IMAGE_TAG="demo"
          else
            IMAGE_TAG="latest"
          fi
          echo "Using IMAGE_TAG: ${IMAGE_TAG}"

          echo "Setting default subscription..."
          azd config set defaults.subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

          echo "Setting environment variables..."
          azd env set \
            AZURE_RESOURCE_GROUP="${{ env.RESOURCE_GROUP_NAME }}" | \
            AZURE_SUBSCRIPTION_ID="${{ secrets.AZURE_SUBSCRIPTION_ID }}" | \
            AZURE_ENV_AI_DEPLOYMENTS_LOCATION="${{ env.AZURE_LOCATION }}" | \
            AZURE_ENV_MODEL_CAPACITY="${{ env.GPT_MIN_CAPACITY }}" | \
            AZURE_ENV_EMBEDDING_MODEL_CAPACITY="${{ env.TEXT_EMBEDDING_MIN_CAPACITY }}" | \
            AZURE_ENV_SECONDARY_LOCATION="northcentralus" | \
            AZURE_ENV_IMAGETAG="${IMAGE_TAG}"

          echo "Environment variables set successfully:"
          azd env get-values

      - name: Deploy using azd
        id: deploy
        run: |
          set -e
          azd up --no-prompt
          echo "Deployment completed successfully."

          WEBAPP_URL=$(azd env get-value WEB_APP_URL)
          echo "WEBAPP_URL=${WEBAPP_URL}" >> $GITHUB_OUTPUT
          echo "Web App URL: ${WEBAPP_URL}"

      - name: Run Post-Deployment Script
        id: post_deploy
        run: |
          set -e
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"

          # Extract necessary environment variables
          STORAGE_ACCOUNT_NAME=$(azd env get-value STORAGE_ACCOUNT_NAME)
          STORAGE_CONTAINER_NAME=$(azd env get-value STORAGE_CONTAINER_NAME)
          KEY_VAULT_NAME=$(azd env get-value KEY_VAULT_NAME)
          AI_SEARCH_SERVICE_NAME=$(azd env get-value AI_SEARCH_SERVICE_NAME)
          COSMOSDB_ACCOUNT_NAME=$(azd env get-value COSMOSDB_ACCOUNT_NAME)
          AI_FOUNDRY_RID=$(azd env get-value AI_FOUNDRY_RESOURCE_ID)


          echo "Running post-deployment script..."
          
          bash ./infra/scripts/process_sample_data.sh \
            "${STORAGE_ACCOUNT_NAME}" \
            "${STORAGE_CONTAINER_NAME}" \
            "${KEY_VAULT_NAME}" \
            "${COSMOSDB_ACCOUNT_NAME}" \
            "${{ env.RESOURCE_GROUP_NAME }}" \
            "${AI_SEARCH_SERVICE_NAME}" \
            "${{ secrets.AZURE_CLIENT_ID }}" \
            "${AI_FOUNDRY_RID}"

      - name: Logout from Azure
        if: always()
        run: |
          az logout
          azd auth logout
          echo "Logged out from Azure."

  
  e2e-test:
    needs: deploy
    uses: ./.github/workflows/test-automation.yml
    with:
      DOCGEN_URL: ${{ needs.deploy.outputs.WEBAPP_URL }}
    secrets: inherit

  cleanup-deployment:
    if: always() && needs.deploy.outputs.RESOURCE_GROUP_NAME != ''
    needs: [deploy, e2e-test]
    runs-on: ubuntu-latest
    env:
      RESOURCE_GROUP_NAME: ${{ needs.deploy.outputs.RESOURCE_GROUP_NAME }}
      SOLUTION_NAME: ${{ needs.deploy.outputs.SOLUTION_NAME }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Azure Developer CLI
        run: |
          curl -fsSL https://aka.ms/install-azd.sh | sudo bash
          azd version

      - name: Login to Azure
        run: |
          azd auth login --client-id ${{ secrets.AZURE_CLIENT_ID }} --client-secret ${{ secrets.AZURE_CLIENT_SECRET }} --tenant-id ${{ secrets.AZURE_TENANT_ID }}
          azd config set defaults.subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Select Environment
        run: |
          # Try to select the environment if it exists, otherwise create a minimal environment for cleanup
          azd env list
          if azd env list | grep -q "${{ env.SOLUTION_NAME }}"; then
            echo "Environment ${{ env.SOLUTION_NAME }} found, selecting it..."
            azd env select ${{ env.SOLUTION_NAME }}
          else
            echo "Environment ${{ env.SOLUTION_NAME }} not found, creating minimal environment for cleanup..."
            azd env new ${{ env.SOLUTION_NAME }} --no-prompt
            azd env set AZURE_RESOURCE_GROUP "${{ env.RESOURCE_GROUP_NAME }}"
            azd env set AZURE_SUBSCRIPTION_ID "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          fi

      - name: Delete deployment using azd
        run: |
          set -e
          echo "Deleting deployment..."
          azd down --purge --force --no-prompt
          echo "Deployment deleted successfully."


      - name: Send Notification on Failure
        if: failure() || needs.deploy.result == 'failure'
        run: |
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          EMAIL_BODY=$(cat <<EOF
          {
            "body": "<p>Dear Team,</p><p>We would like to inform you that the DocGen Deployment Automation process has encountered an issue and has failed to complete successfully.</p><p><strong>Build URL:</strong> <a href=\"${RUN_URL}\">${RUN_URL}</a><br></p><p>Please investigate the matter at your earliest convenience.</p><p>Best regards,<br>Your Automation Team</p>"
          }
          EOF
          )

          curl -X POST "${{ secrets.LOGIC_APP_URL }}" \
            -H "Content-Type: application/json" \
            -d "$EMAIL_BODY" || echo "Failed to send notification"

      - name: Logout from Azure
        if: always()
        run: |
          azd auth logout
          echo "Logged out from Azure."